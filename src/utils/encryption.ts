import { Firestore } from 'firebase/firestore';
import { AES, enc, mode, pad, lib } from 'crypto-js';

// Cl√© de chiffrement principale (en production, cette cl√© serait stock√©e dans un KMS)
// IMPORTANT: Cette impl√©mentation est simplifi√©e pour d√©monstration
// En production, utilisez un syst√®me de gestion de cl√©s s√©curis√©
const MASTER_KEY = import.meta.env.VITE_ENCRYPTION_KEY || 
                  'hds-compliant-encryption-key-must-be-stored-securely';

// Debug: Log de la cl√© utilis√©e (√† supprimer en production)
if (import.meta.env.DEV) {
  console.log('üîë Cl√© de chiffrement utilis√©e:', MASTER_KEY.substring(0, 10) + '...');
}

// Vecteur d'initialisation (IV) pour AES
const generateIV = () => {
  return lib.WordArray.random(16);
};

// Stockage des cl√©s par utilisateur
const userKeys: Map<string, string> = new Map();

/**
 * Initialise le syst√®me de chiffrement
 */
export function initializeEncryption(): void {
  console.log('üîê Initializing encryption system for HDS compliance');
  
  // V√©rification de l'environnement
  if (typeof window === 'undefined') {
    throw new Error('Encryption system requires browser environment');
  }
  
  // V√©rification de la disponibilit√© des API de chiffrement
  if (!window.crypto || !window.crypto.subtle) {
    console.warn('‚ö†Ô∏è Web Crypto API not available - falling back to CryptoJS');
  }
  
  console.log('‚úÖ Encryption system initialized');
}

/**
 * G√©n√®re une cl√© de chiffrement pour un utilisateur
 */
export function generateUserKey(userId: string): string {
  // D√©rivation de cl√© bas√©e sur l'ID utilisateur et la cl√© ma√Ætre
  const userKey = AES.encrypt(userId, MASTER_KEY).toString();
  userKeys.set(userId, userKey);
  return userKey;
}

/**
 * R√©cup√®re la cl√© d'un utilisateur ou en g√©n√®re une nouvelle
 */
export function getUserKey(userId: string): string {
  if (!userKeys.has(userId)) {
    return generateUserKey(userId);
  }
  return userKeys.get(userId)!;
}

/**
 * Valide les donn√©es avant chiffrement
 */
export function validateDataForEncryption(data: any): boolean {
  if (data === null || data === undefined) {
    return false;
  }
  
  // Si c'est une cha√Æne vide, c'est valide
  if (data === '') {
    return true;
  }
  
  // V√©rifier si c'est d√©j√† chiffr√©
  if (typeof data === 'string' && isEncrypted(data)) {
    return false; // √âviter le double chiffrement
  }
  
  return true;
}

/**
 * Chiffre des donn√©es sensibles
 */
export function encryptData(data: any, userId: string): string {
  try {
    // Validation des donn√©es
    if (!validateDataForEncryption(data)) {
      console.warn('‚ö†Ô∏è Invalid data for encryption, returning original data');
      return typeof data === 'string' ? data : JSON.stringify(data);
    }
    
    const userKey = getUserKey(userId);
    const iv = generateIV();
    
    // Conversion des donn√©es en cha√Æne JSON
    const jsonString = typeof data === 'string' ? data : JSON.stringify(data);
    
    // Chiffrement AES-256-CBC avec CryptoJS
    const encrypted = AES.encrypt(jsonString, userKey, {
      iv: iv,
      mode: mode.CBC,
      padding: pad.Pkcs7
    });
    
    // Format: IV:Donn√©es chiffr√©es
    return iv.toString(enc.Hex) + ':' + encrypted.toString();
  } catch (error) {
    console.error('‚ùå Encryption failed for data:', typeof data, error);
    // En cas d'erreur, retourner une version s√©curis√©e des donn√©es originales
    return `[ENCRYPTION_ERROR]:${typeof data === 'string' ? data : JSON.stringify(data)}`;
  }
}

/**
 * V√©rifie si une cha√Æne est au format de donn√©es chiffr√©es valide
 */
export function isValidEncryptedFormat(encryptedData: string): boolean {
  // V√©rifier le format IV:Ciphertext
  if (!encryptedData || typeof encryptedData !== 'string') {
    return false;
  }
  
  const parts = encryptedData.split(':');
  if (parts.length !== 2) {
    return false;
  }
  
  // V√©rifier que l'IV est un hexad√©cimal valide de la bonne longueur (32 caract√®res pour 16 bytes)
  const ivHex = parts[0];
  if (!/^[0-9a-fA-F]{32}$/.test(ivHex)) {
    return false;
  }
  
  // V√©rifier que le texte chiffr√© n'est pas vide
  const ciphertext = parts[1];
  if (!ciphertext || ciphertext.length < 10) {
    return false;
  }
  
  return true;
}

/**
 * D√©chiffre des donn√©es sensibles avec gestion robuste des erreurs
 */
export function decryptData(encryptedData: string, userId: string): any {
  try {
    // V√©rification pr√©liminaire
    if (!encryptedData || typeof encryptedData !== 'string') {
      return '[NOT_ENCRYPTED_OR_INVALID]';
    }
    
    // V√©rifier si c'est une cha√Æne vide ou tr√®s courte
    if (encryptedData.trim().length === 0) {
      return '[EMPTY_DATA]';
    }
    
    // Gestion des donn√©es marqu√©es comme erreur d'encryption
    if (encryptedData.startsWith('[ENCRYPTION_ERROR]:')) {
      return '[ENCRYPTION_ERROR]';
    }
    
    // Gestion sp√©ciale pour les donn√©es marqu√©es comme prot√©g√©es
    if (encryptedData === '[Donn√©es prot√©g√©es]' || 
        encryptedData.startsWith('[Donn√©es prot√©g√©es')) {
      return '[PROTECTED_DATA]';
    }
    
    // Gestion des erreurs de d√©chiffrement pr√©c√©dentes
    if (encryptedData.startsWith('[DECRYPTION_ERROR:')) {
      return '[PREVIOUS_DECRYPTION_ERROR]';
    }
    
    // V√©rifier si le format est valide
    if (!isValidEncryptedFormat(encryptedData)) {
      // Si √ßa ne ressemble pas √† des donn√©es chiffr√©es, c'est peut-√™tre du texte en clair
      if (!encryptedData.includes(':') || encryptedData.length < 20) {
        return encryptedData; // Retourner tel quel si c'est probablement du texte en clair
      }
      return '[MALFORMED_ENCRYPTED_DATA]';
    }
    
    const userKey = getUserKey(userId);
    
    // S√©paration de l'IV et des donn√©es chiffr√©es
    const [ivHex, ciphertext] = encryptedData.split(':');
    
    // V√©rification suppl√©mentaire
    if (!ivHex || !ciphertext) {
      return '[MISSING_IV_OR_CIPHERTEXT]';
    }
    
    // V√©rifier que le ciphertext n'est pas vide
    if (ciphertext.trim().length === 0) {
      return '[EMPTY_CIPHERTEXT]';
    }
    
    let iv;
    try {
      iv = enc.Hex.parse(ivHex);
    } catch (ivError) {
      return '[INVALID_IV_FORMAT]';
    }
    
    // D√©chiffrement avec gestion d'erreur
    let decrypted;
    try {
      decrypted = AES.decrypt(ciphertext, userKey, {
        iv: iv,
        mode: mode.CBC,
        padding: pad.Pkcs7
      });
      
      // V√©rifier que le d√©chiffrement a produit quelque chose
      if (!decrypted || decrypted.sigBytes === 0) {
        return '[EMPTY_DECRYPTION_RESULT]';
      }
    } catch (decryptError) {
      return '[AES_DECRYPTION_FAILED]';
    }
    
    // Conversion en UTF-8 avec validation
    let decryptedString;
    try {
      decryptedString = decrypted.toString(enc.Utf8);
      
      // V√©rification basique de la validit√© UTF-8
      if (!decryptedString || decryptedString.length === 0) {
        return '[EMPTY_UTF8_DATA]';
      }
      
      // Si la cha√Æne contient des caract√®res de remplacement, retourner une erreur
      if (decryptedString.includes('\uFFFD')) {
        return '[DECODING_FAILED]';
      }
      
    } catch (utf8Error) {
      return '[DECODING_FAILED]';
    }
    
    // Tentative de parsing JSON
    try {
      return JSON.parse(decryptedString);
    } catch (jsonError) {
      // Si ce n'est pas du JSON, retourner la cha√Æne
      return decryptedString;
    }
  } catch (error) {
    return '[GENERAL_DECRYPTION_ERROR]';
  }
}

/**
 * V√©rifie si une donn√©e est chiffr√©e
 */
export function isEncrypted(data: string): boolean {
  // V√©rification basique du format IV:Ciphertext
  return typeof data === 'string' && data.includes(':') && data.length > 40;
}

/**
 * Active le moteur de chiffrement pour Firestore
 * Note: Ceci est une impl√©mentation simplifi√©e pour d√©monstration
 */
export function enableCryptoEngine(db: Firestore): void {
  console.log('üîí Enabling crypto engine for Firestore');
  
  // En production, on intercepterait les op√©rations Firestore
  // pour chiffrer/d√©chiffrer automatiquement les donn√©es sensibles
  
  // Cette fonction est un placeholder pour d√©monstration
}

/**
 * Pseudonymise les donn√©es d'identification
 */
export function pseudonymizeData(data: any, fields: string[]): any {
  if (!data) return data;
  
  const result = { ...data };
  
  fields.forEach(field => {
    if (result[field]) {
      // Hachage simple pour la pseudonymisation
      result[field] = hashIdentifier(result[field]);
    }
  });
  
  return result;
}

/**
 * Fonction de hachage pour pseudonymisation
 */
function hashIdentifier(value: string): string {
  // Impl√©mentation simplifi√©e - en production, utiliser un algorithme plus robuste
  const hash = AES.encrypt(value, MASTER_KEY).toString();
  return hash.substring(0, 24); // Version tronqu√©e pour lisibilit√©
}

/**
 * G√©n√®re un identifiant pseudonymis√©
 */
export function generatePseudoId(realId: string, context: string): string {
  return hashIdentifier(`${realId}-${context}-${MASTER_KEY}`);
}

/**
 * Tente de r√©parer des donn√©es chiffr√©es corrompues
 */
export function attemptDataRepair(encryptedData: string, userId: string): string | null {
  try {
    // V√©rifier si les donn√©es sont d√©j√† au format d'erreur
    if (encryptedData.startsWith('[DECRYPTION_ERROR:') || 
        encryptedData.startsWith('[ENCRYPTION_ERROR:')) {
      return null; // Impossible de r√©parer
    }
    
    // V√©rifier si le format est valide
    if (!isValidEncryptedFormat(encryptedData)) {
      // Tenter de r√©cup√©rer l'IV et le ciphertext
      const parts = encryptedData.split(':');
      if (parts.length >= 2) {
        const ivHex = parts[0];
        const ciphertext = parts.slice(1).join(':'); // Au cas o√π il y aurait des : dans le ciphertext
        
        // V√©rifier si l'IV est un hexad√©cimal valide
        if (/^[0-9a-fA-F]+$/.test(ivHex)) {
          // Padding de l'IV si n√©cessaire
          const paddedIvHex = ivHex.padEnd(32, '0').substring(0, 32);
          return paddedIvHex + ':' + ciphertext;
        }
      }
    }
    
    return null; // Impossible de r√©parer
  } catch (error) {
    console.error('‚ùå Data repair attempt failed:', error);
    return null;
  }
}

/**
 * Migre les donn√©es chiffr√©es vers un nouveau format
 */
export function migrateEncryptedData(oldEncryptedData: string, userId: string): string {
  try {
    // Tenter de d√©chiffrer avec l'ancienne m√©thode
    const decryptedData = decryptData(oldEncryptedData, userId);
    
    // Si le d√©chiffrement a √©chou√©, retourner les donn√©es originales
    if (typeof decryptedData === 'string' && decryptedData.startsWith('[DECRYPTION_ERROR:')) {
      return oldEncryptedData;
    }
    
    // Rechiffrer avec la nouvelle m√©thode
    return encryptData(decryptedData, userId);
  } catch (error) {
    console.error('‚ùå Data migration failed:', error);
    return oldEncryptedData;
  }
}